# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import progue_pb2 as progue__pb2


class ProgueServerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.get_state = channel.unary_unary(
        '/progue.ProgueServer/get_state',
        request_serializer=progue__pb2.StateRequest.SerializeToString,
        response_deserializer=progue__pb2.State.FromString,
        )
    self.make_turn = channel.unary_unary(
        '/progue.ProgueServer/make_turn',
        request_serializer=progue__pb2.MakeTurnRequest.SerializeToString,
        response_deserializer=progue__pb2.MakeTurnResponse.FromString,
        )
    self.list_games = channel.unary_unary(
        '/progue.ProgueServer/list_games',
        request_serializer=progue__pb2.ListGamesRequest.SerializeToString,
        response_deserializer=progue__pb2.ListGamesResponse.FromString,
        )
    self.connect_to_game = channel.unary_unary(
        '/progue.ProgueServer/connect_to_game',
        request_serializer=progue__pb2.GameId.SerializeToString,
        response_deserializer=progue__pb2.ConnectToGameResponse.FromString,
        )
    self.create_game = channel.unary_unary(
        '/progue.ProgueServer/create_game',
        request_serializer=progue__pb2.CreateGameRequest.SerializeToString,
        response_deserializer=progue__pb2.CreateGameResponse.FromString,
        )


class ProgueServerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def get_state(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def make_turn(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def list_games(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def connect_to_game(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def create_game(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ProgueServerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'get_state': grpc.unary_unary_rpc_method_handler(
          servicer.get_state,
          request_deserializer=progue__pb2.StateRequest.FromString,
          response_serializer=progue__pb2.State.SerializeToString,
      ),
      'make_turn': grpc.unary_unary_rpc_method_handler(
          servicer.make_turn,
          request_deserializer=progue__pb2.MakeTurnRequest.FromString,
          response_serializer=progue__pb2.MakeTurnResponse.SerializeToString,
      ),
      'list_games': grpc.unary_unary_rpc_method_handler(
          servicer.list_games,
          request_deserializer=progue__pb2.ListGamesRequest.FromString,
          response_serializer=progue__pb2.ListGamesResponse.SerializeToString,
      ),
      'connect_to_game': grpc.unary_unary_rpc_method_handler(
          servicer.connect_to_game,
          request_deserializer=progue__pb2.GameId.FromString,
          response_serializer=progue__pb2.ConnectToGameResponse.SerializeToString,
      ),
      'create_game': grpc.unary_unary_rpc_method_handler(
          servicer.create_game,
          request_deserializer=progue__pb2.CreateGameRequest.FromString,
          response_serializer=progue__pb2.CreateGameResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'progue.ProgueServer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
