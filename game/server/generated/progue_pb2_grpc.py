# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import progue_pb2 as progue__pb2


class ProgueServerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetState = channel.unary_unary(
        '/progue.ProgueServer/GetState',
        request_serializer=progue__pb2.StateRequest.SerializeToString,
        response_deserializer=progue__pb2.State.FromString,
        )
    self.MakeTurn = channel.unary_unary(
        '/progue.ProgueServer/MakeTurn',
        request_serializer=progue__pb2.MakeTurnRequest.SerializeToString,
        response_deserializer=progue__pb2.MakeTurnResponse.FromString,
        )
    self.ListGames = channel.unary_unary(
        '/progue.ProgueServer/ListGames',
        request_serializer=progue__pb2.ListGamesRequest.SerializeToString,
        response_deserializer=progue__pb2.ListGamesResponse.FromString,
        )
    self.ConnectToGame = channel.unary_unary(
        '/progue.ProgueServer/ConnectToGame',
        request_serializer=progue__pb2.GameId.SerializeToString,
        response_deserializer=progue__pb2.ConnectToGameResponse.FromString,
        )
    self.CreateGame = channel.unary_unary(
        '/progue.ProgueServer/CreateGame',
        request_serializer=progue__pb2.GameId.SerializeToString,
        response_deserializer=progue__pb2.CreateGameResponse.FromString,
        )
    self.GameSaveManage = channel.unary_unary(
        '/progue.ProgueServer/GameSaveManage',
        request_serializer=progue__pb2.GameSaveRequest.SerializeToString,
        response_deserializer=progue__pb2.GameSaveResponse.FromString,
        )


class ProgueServerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetState(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def MakeTurn(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListGames(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ConnectToGame(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateGame(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GameSaveManage(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ProgueServerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetState': grpc.unary_unary_rpc_method_handler(
          servicer.GetState,
          request_deserializer=progue__pb2.StateRequest.FromString,
          response_serializer=progue__pb2.State.SerializeToString,
      ),
      'MakeTurn': grpc.unary_unary_rpc_method_handler(
          servicer.MakeTurn,
          request_deserializer=progue__pb2.MakeTurnRequest.FromString,
          response_serializer=progue__pb2.MakeTurnResponse.SerializeToString,
      ),
      'ListGames': grpc.unary_unary_rpc_method_handler(
          servicer.ListGames,
          request_deserializer=progue__pb2.ListGamesRequest.FromString,
          response_serializer=progue__pb2.ListGamesResponse.SerializeToString,
      ),
      'ConnectToGame': grpc.unary_unary_rpc_method_handler(
          servicer.ConnectToGame,
          request_deserializer=progue__pb2.GameId.FromString,
          response_serializer=progue__pb2.ConnectToGameResponse.SerializeToString,
      ),
      'CreateGame': grpc.unary_unary_rpc_method_handler(
          servicer.CreateGame,
          request_deserializer=progue__pb2.GameId.FromString,
          response_serializer=progue__pb2.CreateGameResponse.SerializeToString,
      ),
      'GameSaveManage': grpc.unary_unary_rpc_method_handler(
          servicer.GameSaveManage,
          request_deserializer=progue__pb2.GameSaveRequest.FromString,
          response_serializer=progue__pb2.GameSaveResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'progue.ProgueServer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
